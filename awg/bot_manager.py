import db
import aiohttp
import logging
import asyncio
import aiofiles
import os
import re
import tempfile
import json
import subprocess
import sys
import pytz
import zipfile
import ipaddress
import humanize
import shutil
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from yookassa import Configuration, Payment

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

setting = db.get_config()
bot_token = setting.get('bot_token')
admin_id = setting.get('admin_id')
wg_config_file = setting.get('wg_config_file')
docker_container = setting.get('docker_container')
endpoint = setting.get('endpoint')

if not all([bot_token, admin_id, wg_config_file, docker_container, endpoint]):
    logger.error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")
    sys.exit(1)

bot = Bot(bot_token)
admin = int(admin_id)
WG_CONFIG_FILE = wg_config_file
DOCKER_CONTAINER = docker_container
ENDPOINT = endpoint

Configuration.account_id = '993270'
Configuration.secret_key = 'test_cE-RElZLKakvb585wjrh9XAoqGSyS_rcmta2v1MdURE'

PAYMENT_AMOUNTS = {
    "1_month": 500,  # 500 RUB for 1 month
    "3_months": 1200,  # 1200 RUB for 3 months
    "6_months": 2000,  # 2000 RUB for 6 months
    "12_months": 3500  # 3500 RUB for 12 months
}

class AdminMessageDeletionMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        if message.from_user.id == admin:
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=2))

dp = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone=pytz.UTC)
scheduler.start()

dp.middleware.setup(AdminMessageDeletionMiddleware())

def get_main_menu_markup(user_id):
    markup = InlineKeyboardMarkup(row_width=1)
    if user_id == admin:
        markup.add(
            InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="get_config"),
            InlineKeyboardButton("üìä –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_users"),
            InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="create_backup"),
            InlineKeyboardButton("üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")
        )
    else:
        markup.add(
            InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å VPN", callback_data="buy_vpn"),
            InlineKeyboardButton("üîë –ú–æ–π VPN –∫–ª—é—á", callback_data="my_vpn_key"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )
    return markup

def get_payment_menu_markup():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü - 500‚ÇΩ", callback_data="pay_1_month"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 1200‚ÇΩ", callback_data="pay_3_months"),
        InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 2000‚ÇΩ", callback_data="pay_6_months"),
        InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 3500‚ÇΩ", callback_data="pay_12_months")
    )
    markup.add(get_back_button())
    return markup

def get_back_button(callback_data="home"):
    return InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=callback_data)

def get_home_button():
    return InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")

async def format_client_info(username, expiration_time=None, traffic_limit=None):
    status = "üî¥ –û—Ñ–ª–∞–π–Ω"
    incoming_traffic = "‚Üì‚Äî"
    outgoing_traffic = "‚Üë‚Äî"
    ipv4_address = "‚Äî"
    total_bytes = 0
    formatted_total = "0.00B"
    
    active_clients = db.get_active_list()
    active_info = next((ac for ac in active_clients if ac[0] == username), None)
    
    if active_info:
        last_handshake_str = active_info[1]
        if last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
            try:
                last_handshake_dt = parse_relative_time(last_handshake_str)
                if last_handshake_dt:
                    delta = datetime.now(pytz.UTC) - last_handshake_dt
                    if delta <= timedelta(minutes=1):
                        status = "üü¢ –û–Ω–ª–∞–π–Ω"
                    else:
                        status = "‚ùå –û—Ñ–ª–∞–π–Ω"
                    transfer = active_info[2]
                    incoming_bytes, outgoing_bytes = parse_transfer(transfer)
                    incoming_traffic = f"‚Üì{humanize_bytes(incoming_bytes)}"
                    outgoing_traffic = f"‚Üë{humanize_bytes(outgoing_bytes)}"
                    traffic_data = await read_traffic(username)
                    total_bytes = traffic_data.get('total_incoming', 0) + traffic_data.get('total_outgoing', 0)
                    formatted_total = humanize_bytes(total_bytes)
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {last_handshake_str}")
    
    if expiration_time:
        now = datetime.now(pytz.UTC)
        try:
            expiration_dt = expiration_time
            if expiration_dt.tzinfo is None:
                expiration_dt = expiration_dt.replace(tzinfo=pytz.UTC)
            remaining = expiration_dt - now
            if remaining.total_seconds() > 0:
                days, seconds = remaining.days, remaining.seconds
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                date_end = f"üìÖ {days}–¥ {hours}—á {minutes}–º"
            else:
                date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
            date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    else:
        date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"

    if traffic_limit == "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ":
        traffic_limit_display = "‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    else:
        traffic_limit_display = traffic_limit

    return (
        f"üìß *–ò–º—è:* {username}\n"
        f"üåê *–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:* {status}\n"
        f"{date_end}\n"
        f"üîº *–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:* {incoming_traffic}\n"
        f"üîΩ *–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:* {outgoing_traffic}\n"
        f"üìä *–í—Å–µ–≥–æ:* ‚Üë‚Üì{formatted_total} –∏–∑ **{traffic_limit_display}**\n"
    )

user_main_messages = {}
isp_cache = {}
ISP_CACHE_FILE = 'files/isp_cache.json'
CACHE_TTL = timedelta(hours=24)

TRAFFIC_LIMITS = ["5 GB", "10 GB", "30 GB", "100 GB", "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"]

def get_interface_name():
    return os.path.basename(WG_CONFIG_FILE).split('.')[0]

async def load_isp_cache():
    global isp_cache
    if os.path.exists(ISP_CACHE_FILE):
        async with aiofiles.open(ISP_CACHE_FILE, 'r') as f:
            try:
                isp_cache = json.loads(await f.read())
                for ip in list(isp_cache.keys()):
                    isp_cache[ip]['timestamp'] = datetime.fromisoformat(isp_cache[ip]['timestamp'])
            except:
                isp_cache = {}

async def save_isp_cache():
    async with aiofiles.open(ISP_CACHE_FILE, 'w') as f:
        cache_to_save = {ip: {'isp': data['isp'], 'timestamp': data['timestamp'].isoformat()} for ip, data in isp_cache.items()}
        await f.write(json.dumps(cache_to_save))

async def get_isp_info(ip: str) -> str:
    now = datetime.now(pytz.UTC)
    if ip in isp_cache:
        if now - isp_cache[ip]['timestamp'] < CACHE_TTL:
            return isp_cache[ip]['isp']
    try:
        ip_obj = ipaddress.ip_address(ip)
        if ip_obj.is_private:
            return "Private Range"
    except:
        return "Invalid IP"
    url = f"http://ip-api.com/json/{ip}?fields=status,message,isp"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get('status') == 'success':
                        isp = data.get('isp', 'Unknown ISP')
                        isp_cache[ip] = {'isp': isp, 'timestamp': now}
                        await save_isp_cache()
                        return isp
    except:
        pass
    return "Unknown ISP"

async def cleanup_isp_cache():
    now = datetime.now(pytz.UTC)
    for ip in list(isp_cache.keys()):
        if now - isp_cache[ip]['timestamp'] >= CACHE_TTL:
            del isp_cache[ip]
    await save_isp_cache()

async def cleanup_connection_data(username: str):
    file_path = os.path.join('files', 'connections', f'{username}_ip.json')
    if os.path.exists(file_path):
        async with aiofiles.open(file_path, 'r') as f:
            try:
                data = json.loads(await f.read())
            except:
                data = {}
        sorted_ips = sorted(data.items(), key=lambda x: datetime.strptime(x[1], '%d.%m.%Y %H:%M'), reverse=True)
        limited_ips = dict(sorted_ips[:100])
        async with aiofiles.open(file_path, 'w') as f:
            await f.write(json.dumps(limited_ips))

async def load_isp_cache_task():
    await load_isp_cache()
    scheduler.add_job(cleanup_isp_cache, 'interval', hours=1)

async def parse_transfer(transfer_str):
    try:
        if '/' in transfer_str:
            incoming, outgoing = transfer_str.split('/')
            incoming = incoming.strip()
            outgoing = outgoing.strip()
            incoming_match = re.match(r'([\d.]+)\s*(\w+)', incoming)
            outgoing_match = re.match(r'([\d.]+)\s*(\w+)', outgoing)
            
            def convert_to_bytes(value, unit):
                size_map = {
                    'B': 1,
                    'KB': 10**3,
                    'KiB': 1024,
                    'MB': 10**6,
                    'MiB': 1024**2,
                    'GB': 10**9,
                    'GiB': 1024**3,
                }
                return float(value) * size_map.get(unit, 1)
            
            incoming_bytes = convert_to_bytes(*incoming_match.groups()) if incoming_match else 0
            outgoing_bytes = convert_to_bytes(*outgoing_match.groups()) if outgoing_match else 0
            return incoming_bytes, outgoing_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        return 0, 0

def humanize_bytes(bytes_value):
    return humanize.naturalsize(bytes_value, binary=True)

async def read_traffic(username):
    traffic_file = os.path.join('users', username, 'traffic.json')
    os.makedirs(os.path.dirname(traffic_file), exist_ok=True)
    
    if not os.path.exists(traffic_file):
        traffic_data = {
            "total_incoming": 0,
            "total_outgoing": 0,
            "last_incoming": 0,
            "last_outgoing": 0
        }
        async with aiofiles.open(traffic_file, 'w') as f:
            await f.write(json.dumps(traffic_data))
        return traffic_data
    
    try:
        async with aiofiles.open(traffic_file, 'r') as f:
            content = await f.read()
            return json.loads(content)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ traffic.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        traffic_data = {
            "total_incoming": 0,
            "total_outgoing": 0,
            "last_incoming": 0,
            "last_outgoing": 0
        }
        async with aiofiles.open(traffic_file, 'w') as f:
            await f.write(json.dumps(traffic_data))
        return traffic_data

async def update_traffic(username, incoming_bytes, outgoing_bytes):
    traffic_data = await read_traffic(username)
    
    delta_incoming = max(0, incoming_bytes - traffic_data.get('last_incoming', 0))
    delta_outgoing = max(0, outgoing_bytes - traffic_data.get('last_outgoing', 0))
    
    traffic_data['total_incoming'] += delta_incoming
    traffic_data['total_outgoing'] += delta_outgoing
    traffic_data['last_incoming'] = incoming_bytes
    traffic_data['last_outgoing'] = outgoing_bytes
    
    traffic_file = os.path.join('users', username, 'traffic.json')
    async with aiofiles.open(traffic_file, 'w') as f:
        await f.write(json.dumps(traffic_data))
    
    return traffic_data

async def update_all_clients_traffic():
    logger.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    active_clients = db.get_active_list()
    
    for client in active_clients:
        username = client[0]
        transfer = client[2]
        incoming_bytes, outgoing_bytes = parse_transfer(transfer)
        
        try:
            traffic_data = await update_traffic(username, incoming_bytes, outgoing_bytes)
            logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è {username}: ‚Üì{humanize_bytes(traffic_data['total_incoming'])} ‚Üë{humanize_bytes(traffic_data['total_outgoing'])}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
            traffic_limit = db.get_user_traffic_limit(username)
            if traffic_limit != "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ":
                limit_bytes = parse_traffic_limit(traffic_limit)
                total_bytes = traffic_data['total_incoming'] + traffic_data['total_outgoing']
                
                if total_bytes >= limit_bytes:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è...")
                    await deactivate_user(username)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {username}: {e}")

async def generate_vpn_key(conf_path: str) -> str:
    try:
        process = await asyncio.create_subprocess_exec(
            'python3.11',
            'awg-decode.py',
            '--encode',
            conf_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ awg-decode.py: {stderr.decode().strip()}")
            return ""
            
        vpn_key = stdout.decode().strip()
        if vpn_key.startswith('vpn://'):
            return vpn_key
        else:
            logger.error(f"awg-decode.py –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {vpn_key}")
            return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–ª—é—á–∞: {e}")
        return ""

async def deactivate_user(client_name: str):
    success = db.deactive_user_db(client_name)
    if success:
        db.remove_user_expiration(client_name)
        try:
            scheduler.remove_job(job_id=client_name)
        except:
            pass
            
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = os.path.join('users', client_name)
        try:
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name}: {e}")
            
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        confirmation_text = f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{client_name}* –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"
        try:
            sent_message = await bot.send_message(
                admin,
                confirmation_text,
                parse_mode="Markdown",
                disable_notification=True
            )
            asyncio.create_task(delete_message_after_delay(admin, sent_message.message_id, delay=15))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name}")

async def check_environment():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        cmd = f"docker ps --filter 'name={DOCKER_CONTAINER}' --format '{{{{.Names}}}}'"
        container_names = subprocess.check_output(cmd, shell=True).decode().strip().split('\n')
        if DOCKER_CONTAINER not in container_names:
            logger.error(f"Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{DOCKER_CONTAINER}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ WireGuard
        cmd = f"docker exec {DOCKER_CONTAINER} test -f {WG_CONFIG_FILE}"
        subprocess.check_call(cmd, shell=True)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

async def periodic_ensure_peer_names():
    db.ensure_peer_names()

async def on_startup(dp):
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('files/connections', exist_ok=True)
    os.makedirs('users', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à ISP
    await load_isp_cache_task()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    environment_ok = await check_environment()
    if not environment_ok:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmneziaVPN")
        await bot.send_message(
            admin,
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmneziaVPN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞",
            disable_notification=True
        )
        await bot.close()
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if not scheduler.running:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            update_all_clients_traffic,
            IntervalTrigger(minutes=1),
            id='traffic_update'
        )
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω –ø–∏—Ä–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            periodic_ensure_peer_names,
            IntervalTrigger(minutes=1),
            id='peer_names_sync'
        )
        
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    users = db.get_users_with_expiration()
    for username, expiration_time, traffic_limit in users:
        if expiration_time:
            try:
                expiration_dt = expiration_time if isinstance(expiration_time, datetime) else datetime.fromisoformat(expiration_time)
                if expiration_dt.tzinfo is None:
                    expiration_dt = expiration_dt.replace(tzinfo=pytz.UTC)
                
                if expiration_dt > datetime.now(pytz.UTC):
                    scheduler.add_job(
                        deactivate_user,
                        trigger=DateTrigger(run_date=expiration_dt),
                        args=[username],
                        id=username
                    )
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è {username} –Ω–∞ {expiration_dt}")
                else:
                    await deactivate_user(username)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

async def on_shutdown(dp):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.shutdown()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à ISP
    await save_isp_cache()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
    await bot.close()

@dp.message_handler(commands=['start', 'help'])
async def help_command_handler(message: types.Message):
    if message.from_user.id == admin:
        sent_message = await message.answer(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_main_menu_markup(message.from_user.id)
        )
    else:
        sent_message = await message.answer(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å VPN –ø–æ–¥–ø–∏—Å–∫—É\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_main_menu_markup(message.from_user.id)
        )
    
    user_main_messages[message.from_user.id] = {
        'chat_id': sent_message.chat.id,
        'message_id': sent_message.message_id
    }
    
    try:
        await bot.pin_chat_message(
            chat_id=sent_message.chat.id,
            message_id=sent_message.message_id,
            disable_notification=True
        )
    except:
        pass

@dp.message_handler()
async def handle_messages(message: types.Message):
    user_state = user_main_messages.get(message.from_user.id, {}).get('state')
    if user_state == 'waiting_for_user_name':
        user_name = message.text.strip()
        if not all(c.isalnum() or c in "-_" for c in user_name):
            await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=2))
            return
        user_main_messages[message.from_user.id]['client_name'] = user_name
        user_main_messages[message.from_user.id]['state'] = 'waiting_for_duration'
        duration_buttons = [
            InlineKeyboardButton("1 —á–∞—Å", callback_data=f"duration_1h_{user_name}_noipv6"),
            InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"duration_1d_{user_name}_noipv6"),
            InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"duration_1w_{user_name}_noipv6"),
            InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"duration_1m_{user_name}_noipv6"),
            InlineKeyboardButton("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data=f"duration_unlimited_{user_name}_noipv6"),
            InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
        ]
        duration_markup = InlineKeyboardMarkup(row_width=1).add(*duration_buttons)
        main_chat_id = user_main_messages[message.from_user.id].get('chat_id')
        main_message_id = user_main_messages[message.from_user.id].get('message_id')
        if main_chat_id and main_message_id:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{user_name}**:",
                parse_mode="Markdown",
                reply_markup=duration_markup
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=2))

@dp.callback_query_handler(lambda c: c.data.startswith('add_user'))
async def prompt_for_user_name(callback_query: types.CallbackQuery):
    main_chat_id = user_main_messages.get(callback_query.from_user.id, {}).get('chat_id')
    main_message_id = user_main_messages.get(callback_query.from_user.id, {}).get('message_id')
    if main_chat_id and main_message_id:
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
            )
        )
        user_main_messages[callback_query.from_user.id]['state'] = 'waiting_for_user_name'
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    await callback_query.answer()

def parse_relative_time(relative_str: str) -> datetime:
    try:
        parts = relative_str.lower().replace(' ago', '').split(', ')
        delta = timedelta()
        for part in parts:
            number, unit = part.split(' ')
            number = int(number)
            if 'minute' in unit:
                delta += timedelta(minutes=number)
            elif 'second' in unit:
                delta += timedelta(seconds=number)
            elif 'hour' in unit:
                delta += timedelta(hours=number)
            elif 'day' in unit:
                delta += timedelta(days=number)
            elif 'week' in unit:
                delta += timedelta(weeks=number)
            elif 'month' in unit:
                delta += timedelta(days=30 * number)
            elif 'year' in unit:
                delta += timedelta(days=365 * number)
        return datetime.now(pytz.UTC) - delta
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ '{relative_str}': {e}")
        return None

@dp.callback_query_handler(lambda c: c.data.startswith('duration_'))
async def set_config_duration(callback: types.CallbackQuery):
    parts = callback.data.split('_')
    if len(parts) < 4:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    duration_choice = parts[1]
    client_name = parts[2]
    ipv6_flag = parts[3]
    user_main_messages[callback.from_user.id]['duration_choice'] = duration_choice
    user_main_messages[callback.from_user.id]['state'] = 'waiting_for_traffic_limit'
    traffic_buttons = [
        InlineKeyboardButton(limit, callback_data=f"traffic_limit_{limit}_{client_name}")
        for limit in TRAFFIC_LIMITS
    ]
    traffic_markup = InlineKeyboardMarkup(row_width=1).add(*traffic_buttons)
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{client_name}**:",
        parse_mode="Markdown",
        reply_markup=traffic_markup
    )
    await callback.answer()

def format_vpn_key(vpn_key, num_lines=8):
    line_length = len(vpn_key) // num_lines
    if len(vpn_key) % num_lines != 0:
        line_length += 1
    lines = [vpn_key[i:i+line_length] for i in range(0, len(vpn_key), line_length)]
    formatted_key = '\n'.join(lines)
    return formatted_key

@dp.callback_query_handler(lambda c: c.data.startswith('traffic_limit_'))
async def set_traffic_limit(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_', 3)
    if len(parts) < 4:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    traffic_limit = parts[2]
    client_name = parts[3]
    traffic_bytes = parse_traffic_limit(traffic_limit)
    if traffic_limit != "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" and traffic_bytes is None:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return
    user_main_messages[callback_query.from_user.id]['traffic_limit'] = traffic_limit
    user_main_messages[callback_query.from_user.id]['state'] = None
    duration_choice = user_main_messages.get(callback_query.from_user.id, {}).get('duration_choice')
    if duration_choice == '1h':
        duration = timedelta(hours=1)
    elif duration_choice == '1d':
        duration = timedelta(days=1)
    elif duration_choice == '1w':
        duration = timedelta(weeks=1)
    elif duration_choice == '1m':
        duration = timedelta(days=30)
    elif duration_choice == 'unlimited':
        duration = None
    else:
        duration = None
    if duration:
        expiration_time = datetime.now(pytz.UTC) + duration
        db.set_user_expiration(client_name, expiration_time, traffic_limit)
        scheduler.add_job(
            deactivate_user,
            trigger=DateTrigger(run_date=expiration_time),
            args=[client_name],
            id=client_name
        )
        confirmation_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{client_name}** –¥–æ–±–∞–≤–ª–µ–Ω. \n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ **{duration_choice}**."
    else:
        db.set_user_expiration(client_name, None, traffic_limit)
        confirmation_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{client_name}** –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–µ–π—Å—Ç–≤–∏—è."
    if traffic_limit != "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ":
        confirmation_text += f"\n–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: **{traffic_limit}**."
    else:
        confirmation_text += f"\n–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: **‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ**."
    success = db.root_add(client_name, ipv6=False)
    if success:
        try:
            conf_path = os.path.join('users', client_name, f'{client_name}.conf')
            vpn_key = ""
            if os.path.exists(conf_path):
                vpn_key = await generate_vpn_key(conf_path)
            if vpn_key:
                instruction_text = (
                    "\nAmneziaVPN [Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru), "
                    "[GitHub](https://github.com/amnezia-vpn/amnezia-client)"
                )
                formatted_key = format_vpn_key(vpn_key)
                key_message = f"```\n{formatted_key}\n```"
                caption = f"{instruction_text}\n{key_message}"
            else:
                caption = "VPN –∫–ª—é—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
            with open(conf_path, 'rb') as config:
                sent_doc = await bot.send_document(
                    callback_query.from_user.id,
                    config,
                    caption=caption,
                    parse_mode="Markdown",
                    disable_notification=True
                )
                asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_doc.message_id, delay=15))
        except FileNotFoundError:
            confirmation_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            sent_message = await bot.send_message(callback_query.from_user.id, confirmation_text, parse_mode="Markdown", disable_notification=True)
            asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_message.message_id, delay=15))
            await callback_query.answer()
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            confirmation_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            sent_message = await bot.send_message(callback_query.from_user.id, confirmation_text, parse_mode="Markdown", disable_notification=True)
            asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_message.message_id, delay=15))
            await callback_query.answer()
            return
        sent_confirmation = await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=confirmation_text,
            parse_mode="Markdown",
            disable_notification=True
        )
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_confirmation.message_id, delay=15))
    else:
        confirmation_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        sent_confirmation = await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=confirmation_text,
            parse_mode="Markdown",
            disable_notification=True
        )
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_confirmation.message_id, delay=15))
    main_chat_id = user_main_messages.get(callback_query.from_user.id, {}).get('chat_id')
    main_message_id = user_main_messages.get(callback_query.from_user.id, {}).get('message_id')
    if main_chat_id and main_message_id:
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_markup(callback_query.from_user.id)
        )
    else:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", show_alert=True)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('client_'))
async def client_selected_callback(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != admin:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    _, username = callback_query.data.split('client_', 1)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"get_config_{username}"),
        InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_{username}"),
        get_back_button("list_users"),
        get_back_button("return_home")
    )
    
    await callback_query.message.edit_text(
        f"–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('list_users'))
async def list_users_callback(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != admin:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    clients = db.get_client_list()
    if not clients:
        keyboard = InlineKeyboardMarkup().add(
            get_back_button()
        )
        await callback_query.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
            reply_markup=keyboard
        )
        return
        
    keyboard = InlineKeyboardMarkup(row_width=1)
    for username in clients:
        keyboard.add(InlineKeyboardButton(username[0], callback_data=f"client_{username[0]}"))
    keyboard.add(get_back_button())
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('connections_'))
async def client_connections_callback(callback_query: types.CallbackQuery):
    _, username = callback_query.data.split('connections_', 1)
    username = username.strip()
    file_path = os.path.join('files', 'connections', f'{username}_ip.json')
    if not os.path.exists(file_path):
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    try:
        async with aiofiles.open(file_path, 'r') as f:
            data = json.loads(await f.read())
        sorted_ips = sorted(data.items(), key=lambda x: datetime.strptime(x[1], '%d.%m.%Y %H:%M'), reverse=True)
        last_connections = sorted_ips[:5]
        isp_tasks = [get_isp_info(ip) for ip, _ in last_connections]
        isp_results = await asyncio.gather(*isp_tasks)
        connections_text = f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:*\n"
        for (ip, timestamp), isp in zip(last_connections, isp_results):
            connections_text += f"{ip} ({isp}) - {timestamp}\n"
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            get_back_button(f"client_{username}"),
            get_back_button("home")
        )
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=connections_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö.", show_alert=True)
        return
    await cleanup_connection_data(username)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('ip_info_'))
async def ip_info_callback(callback_query: types.CallbackQuery):
    _, username = callback_query.data.split('ip_info_', 1)
    username = username.strip()
    active_clients = db.get_active_list()
    active_info = next((ac for ac in active_clients if ac[0] == username), None)
    if active_info:
        endpoint = active_info[3]
        ip_address = endpoint.split(':')[0]
    else:
        await callback_query.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    url = f"http://ip-api.com/json/{ip_address}?fields=message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,hosting"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if 'message' in data:
                        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {data['message']}", show_alert=True)
                        return
                else:
                    await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {resp.status}", show_alert=True)
                    return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.", show_alert=True)
        return
    info_text = f"*IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {username}:*\n"
    for key, value in data.items():
        info_text += f"{key.capitalize()}: {value}\n"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        get_back_button(f"client_{username}"),
        get_back_button("home")
    )
    main_chat_id = user_main_messages.get(callback_query.from_user.id, {}).get('chat_id')
    main_message_id = user_main_messages.get(callback_query.from_user.id, {}).get('message_id')
    if main_chat_id and main_message_id:
        try:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text=info_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
            return
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_user_'))
async def client_delete_callback(callback_query: types.CallbackQuery):
    username = callback_query.data.split('delete_user_')[1]
    success = db.deactive_user_db(username)
    if success:
        db.remove_user_expiration(username)
        try:
            scheduler.remove_job(job_id=username)
        except:
            pass
        user_dir = os.path.join('users', username)
        try:
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        confirmation_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{username}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    else:
        confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
    main_chat_id = user_main_messages.get(callback_query.from_user.id, {}).get('chat_id')
    main_message_id = user_main_messages.get(callback_query.from_user.id, {}).get('message_id')
    if main_chat_id and main_message_id:
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text=confirmation_text,
            parse_mode="Markdown",
            reply_markup=get_main_menu_markup(callback_query.from_user.id)
        )
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'home')
async def return_home(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != admin:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    user_main_messages[callback_query.from_user.id] = {
        'chat_id': callback_query.message.chat.id,
        'message_id': callback_query.message.message_id,
        'state': None
    }

    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_markup(callback_query.from_user.id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é: {e}")
        sent_message = await callback_query.message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_markup(callback_query.from_user.id)
        )
        user_main_messages[callback_query.from_user.id] = {
            'chat_id': sent_message.chat.id,
            'message_id': sent_message.message_id,
            'state': None
        }
        try:
            await bot.pin_chat_message(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                disable_notification=True
            )
        except:
            pass

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('get_config'))
async def list_users_for_config(callback_query: types.CallbackQuery):
    clients = db.get_client_list()
    if not clients:
        keyboard = InlineKeyboardMarkup().add(
            get_back_button()
        )
        await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç", reply_markup=keyboard)
        return
    keyboard = InlineKeyboardMarkup(row_width=1)
    for client in clients:
        keyboard.insert(InlineKeyboardButton(client[0], callback_data=f"send_config_{client[0]}"))
    keyboard.add(get_back_button())
    main_chat_id = user_main_messages.get(callback_query.from_user.id, {}).get('chat_id')
    main_message_id = user_main_messages.get(callback_query.from_user.id, {}).get('message_id')
    if main_chat_id and main_message_id:
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    else:
        sent_message = await callback_query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
        user_main_messages[callback_query.from_user.id] = {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id}
        try:
            await bot.pin_chat_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id, disable_notification=True)
        except:
            pass
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('send_config_'))
async def send_user_config(callback_query: types.CallbackQuery):
    _, username = callback_query.data.split('send_config_', 1)
    username = username.strip()
    sent_messages = []
    try:
        user_dir = os.path.join('users', username)
        conf_path = os.path.join(user_dir, f'{username}.conf')
        if not os.path.exists(conf_path):
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é, –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return
        if os.path.exists(conf_path):
            vpn_key = await generate_vpn_key(conf_path)
            if vpn_key:
                instruction_text = (
                    "\nAmneziaVPN [Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru), "
                    "[GitHub](https://github.com/amnezia-vpn/amnezia-client)"
                )
                formatted_key = format_vpn_key(vpn_key)
                key_message = f"```\n{formatted_key}\n```"
                caption = f"{instruction_text}\n{key_message}"
            else:
                caption = "VPN –∫–ª—é—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
            with open(conf_path, 'rb') as config:
                sent_doc = await bot.send_document(
                    callback_query.from_user.id,
                    config,
                    caption=caption,
                    parse_mode="Markdown",
                    disable_notification=True
                )
                sent_messages.append(sent_doc.message_id)
        else:
            confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
            sent_message = await bot.send_message(callback_query.from_user.id, confirmation_text, parse_mode="Markdown", disable_notification=True)
            asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_message.message_id, delay=15))
            await callback_query.answer()
            return
    except Exception as e:
        confirmation_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        sent_message = await bot.send_message(callback_query.from_user.id, confirmation_text, parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_message.message_id, delay=15))
        await callback_query.answer()
        return
    if not sent_messages:
        confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
        sent_message = await bot.send_message(callback_query.from_user.id, confirmation_text, parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_message.message_id, delay=15))
        await callback_query.answer()
        return
    else:
        confirmation_text = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è **{username}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
        sent_confirmation = await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=confirmation_text,
            parse_mode="Markdown",
            disable_notification=True
        )
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, sent_confirmation.message_id, delay=15))
    for message_id in sent_messages:
        asyncio.create_task(delete_message_after_delay(callback_query.from_user.id, message_id, delay=15))
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'create_backup')
async def create_backup_callback(callback_query: types.CallbackQuery):
    date_str = datetime.now().strftime('%Y-%m-%d')
    backup_filename = f"backup_{date_str}.zip"
    backup_filepath = os.path.join(os.getcwd(), backup_filename)
    try:
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, create_zip, backup_filepath)
        if os.path.exists(backup_filepath):
            with open(backup_filepath, 'rb') as f:
                await bot.send_document(callback_query.from_user.id, f, caption=backup_filename, disable_notification=True)
            os.remove(backup_filepath)
        else:
            logger.error(f"–ë–µ–∫–∞–ø —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {backup_filepath}")
            await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø.", disable_notification=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø.", disable_notification=True)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'buy_vpn')
async def buy_vpn_callback(callback_query: types.CallbackQuery):
    text = (
        "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*\n\n"
        "‚Ä¢ *1 –º–µ—Å—è—Ü* - 500‚ÇΩ\n"
        "‚Ä¢ *3 –º–µ—Å—è—Ü–∞* - 1200‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 300‚ÇΩ)\n"
        "‚Ä¢ *6 –º–µ—Å—è—Ü–µ–≤* - 2000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 1000‚ÇΩ)\n"
        "‚Ä¢ *12 –º–µ—Å—è—Ü–µ–≤* - 3500‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 2500‚ÇΩ)\n\n"
        "‚úÖ –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç:\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
    )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=get_payment_menu_markup()
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'help')
async def help_callback(callback_query: types.CallbackQuery):
    text = (
        "üîπ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN:*\n\n"
        "1. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É VPN\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ VPN –∫–ª—é—á\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaVPN\n"
        "4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n"
        "‚Ä¢ [AmneziaVPN –¥–ª—è Android](https://play.google.com/store/apps/details?id=org.amnezia.vpn)\n"
        "‚Ä¢ [AmneziaVPN –¥–ª—è iOS](https://apps.apple.com/app/amnezia-vpn/id1600015468)\n"
        "‚Ä¢ [AmneziaVPN –¥–ª—è –ü–ö](https://amnezia.org/downloads)\n\n"
        "üì± *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "‚Ä¢ @support_username"
    )
    
    markup = InlineKeyboardMarkup()
    markup.add(get_back_button())
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=markup,
        disable_web_page_preview=True
    )
    await callback_query.answer()

async def create_payment(user_id: int, period: str) -> dict:
    amount = PAYMENT_AMOUNTS[period]
    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/your_bot_username"
        },
        "capture": True,
        "description": f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period.split('_')[0]} –º–µ—Å—è—Ü(–µ–≤)",
        "metadata": {
            "user_id": user_id,
            "period": period
        }
    })
    
    db.add_payment(user_id, payment.id, amount)
    return payment.confirmation.confirmation_url

@dp.callback_query_handler(lambda c: c.data.startswith('pay_'))
async def handle_payment(callback_query: types.CallbackQuery):
    period = callback_query.data[4:]  # Remove 'pay_' prefix
    try:
        payment_url = await create_payment(callback_query.from_user.id, f"{period}_months")
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment"),
            get_back_button("buy_vpn")
        )
        
        text = (
            "üîπ *–û–ø–ª–∞—Ç–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: *{period} –º–µ—Å—è—Ü(–µ–≤)*\n"
            f"‚Ä¢ –°—É–º–º–∞: *{PAYMENT_AMOUNTS[f'{period}_months']}‚ÇΩ*\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç\n"
            "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª"
        )
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup().add(get_back_button("buy_vpn"))
        )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "check_payment")
async def check_payment_status(callback_query: types.CallbackQuery):
    user_payments = db.get_user_payments(callback_query.from_user.id)
    if not user_payments:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup().add(get_back_button("buy_vpn"))
        )
        return

    latest_payment = user_payments[-1]
    payment_id = latest_payment["payment_id"]
    
    try:
        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN –∫–ª—é—á
            period = payment.metadata.get("period", "1_month")
            duration_days = {
                "1_month": 30,
                "3_months": 90,
                "6_months": 180,
                "12_months": 365
            }.get(period, 30)
            
            expiration_date = datetime.now(pytz.UTC) + timedelta(days=duration_days)
            username = f"user_{callback_query.from_user.id}_{int(datetime.now().timestamp())}"
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = db.root_add(username)
            if success:
                db.set_user_expiration(username, expiration_date, "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ")
                conf_path = os.path.join("users", username, "client.conf")
                vpn_key = await generate_vpn_key(conf_path)
                
                if vpn_key:
                    keyboard = InlineKeyboardMarkup(row_width=1)
                    keyboard.add(
                        InlineKeyboardButton("üì± –°–∫–∞—á–∞—Ç—å AmneziaVPN", url="https://amnezia.org/downloads"),
                        get_home_button()
                    )
                    
                    text = (
                        "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n"
                        "üîë *–í–∞—à VPN –∫–ª—é—á:*\n"
                        f"`{vpn_key}`\n\n"
                        "üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
                        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaVPN\n"
                        "2. –ù–∞–∂–º–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª\n"
                        "3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á\n"
                        "4. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª\n\n"
                        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_date.strftime('%d.%m.%Y %H:%M')}"
                    )
                    
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=text,
                        parse_mode="Markdown",
                        reply_markup=keyboard
                    )
                    db.update_payment_status(payment_id, "completed")
                    return
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup().add(get_back_button("buy_vpn"))
            )
        else:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup().add(get_back_button("buy_vpn"))
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup().add(get_back_button("buy_vpn"))
        )
    
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'my_vpn_key')
async def my_vpn_key_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_pattern = f"user_{user_id}_*"
    
    # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_configs = []
    for root, dirs, files in os.walk("users"):
        for dir_name in dirs:
            if dir_name.startswith(f"user_{user_id}_"):
                conf_path = os.path.join(root, dir_name, "client.conf")
                if os.path.exists(conf_path):
                    expiration_time = db.get_user_expiration(dir_name)
                    if expiration_time:
                        user_configs.append((dir_name, conf_path, expiration_time))
    
    if not user_configs:
        text = (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN:\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ\n"
            "2. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ VPN –∫–ª—é—á"
        )
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å VPN", callback_data="buy_vpn"),
            get_home_button()
        )
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è, –±–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é
        user_configs.sort(key=lambda x: x[2] if x[2] else datetime.min.replace(tzinfo=pytz.UTC))
        username, conf_path, expiration_time = user_configs[-1]
        
        try:
            vpn_key = await generate_vpn_key(conf_path)
            if vpn_key:
                now = datetime.now(pytz.UTC)
                expiration_dt = expiration_time
                if expiration_dt.tzinfo is None:
                    expiration_dt = expiration_dt.replace(tzinfo=pytz.UTC)
                
                if expiration_dt > now:
                    remaining = expiration_dt - now
                    days = remaining.days
                    hours = remaining.seconds // 3600
                    minutes = (remaining.seconds % 3600) // 60
                    
                    text = (
                        "‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*\n\n"
                        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å: {days}–¥ {hours}—á {minutes}–º\n\n"
                        "üîë *–í–∞—à VPN –∫–ª—é—á:*\n"
                        f"`{vpn_key}`\n\n"
                        "üì± *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
                        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AmneziaVPN\n"
                        "2. –ù–∞–∂–º–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª\n"
                        "3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤—ã—à–µ\n"
                        "4. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª"
                    )
                else:
                    text = (
                        "‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*\n\n"
                        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN:\n"
                        "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ\n"
                        "2. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n"
                        "3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á"
                    )
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–ª—é—á–∞: {e}")
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üì± –°–∫–∞—á–∞—Ç—å AmneziaVPN", url="https://amnezia.org/downloads"),
            get_home_button()
        )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=markup,
        disable_web_page_preview=True
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'payment_history')
async def payment_history_callback(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != admin:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    payments = db.get_all_payments()
    message_text = "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
    
    for user_id, user_payments in payments.items():
        for payment in user_payments:
            timestamp = datetime.fromisoformat(payment['timestamp'])
            message_text += (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment['payment_id']}\n"
                f"–°—É–º–º–∞: {payment['amount']} RUB\n"
                f"–°—Ç–∞—Ç—É—Å: {payment['status']}\n"
                f"–î–∞—Ç–∞: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            )
    
    keyboard = InlineKeyboardMarkup().add(
        get_back_button()
    )
    
    await callback_query.message.edit_text(
        message_text if message_text != "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n" else "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'mass_message')
async def mass_message_prompt(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != admin:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    keyboard = InlineKeyboardMarkup().add(
        get_back_button()
    )
    
    user_main_messages[callback_query.from_user.id]['state'] = 'waiting_for_mass_message'
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=keyboard
    )

executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
