from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    """States for regular users"""
    MAIN_MENU = State()
    BUYING_VPN = State()
    SELECTING_PLAN = State()
    AWAITING_PAYMENT = State()
    VIEWING_VPN_KEY = State()
    HELP_MENU = State()

class AdminStates(StatesGroup):
    """States for admin users"""
    ADMIN_MENU = State()
    ADDING_USER = State()
    MANAGING_USERS = State()
    VIEWING_USER = State()
    PAYMENT_HISTORY = State()
    BROADCASTING = State()

class Navigation:
    def __init__(self, admin_id: int):
        self.admin_id = admin_id
        
    def get_main_menu(self, user_id: int) -> InlineKeyboardMarkup:
        """Generate main menu based on user type"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        if user_id == self.admin_id:
            markup.add(
                InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
                InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")
            )
            markup.add(
                InlineKeyboardButton("üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history"),
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
            )
            markup.add(
                InlineKeyboardButton("üì¶ –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="create_backup")
            )
        else:
            markup.add(
                InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="buy_vpn"),
                InlineKeyboardButton("üîë –ú–æ–π VPN –∫–ª—é—á", callback_data="my_vpn_key")
            )
            markup.add(
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
            )
        
        return markup

    def get_subscription_menu(self) -> InlineKeyboardMarkup:
        """Generate subscription plans menu"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("1 –º–µ—Å—è—Ü - 500‚ÇΩ", callback_data="sub_1_month"),
            InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 1200‚ÇΩ", callback_data="sub_3_months")
        )
        markup.add(
            InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 2000‚ÇΩ", callback_data="sub_6_months"),
            InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 3500‚ÇΩ", callback_data="sub_12_months")
        )
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="return_main"))
        return markup

    def get_user_management_menu(self) -> InlineKeyboardMarkup:
        """Generate user management menu for admin"""
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user")
        )
        markup.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats"),
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="problem_users")
        )
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="return_main"))
        return markup

    def get_vpn_key_menu(self, has_active_key: bool) -> InlineKeyboardMarkup:
        """Generate VPN key management menu"""
        markup = InlineKeyboardMarkup(row_width=2)
        if has_active_key:
            markup.add(
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á", callback_data="regenerate_key"),
                InlineKeyboardButton("üì± QR –∫–æ–¥", callback_data="show_qr")
            )
            markup.add(
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="key_stats"),
                InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã", callback_data="key_issues")
            )
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="return_main"))
        return markup

    @staticmethod
    def get_back_button(callback_data: str = "return_main") -> InlineKeyboardMarkup:
        """Generate a back button markup"""
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=callback_data))
        return markup

    @staticmethod
    async def handle_invalid_state(callback: CallbackQuery, state: FSMContext):
        """Handle invalid state transitions"""
        await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", show_alert=True)
        logger.warning(f"Invalid state transition attempted by user {callback.from_user.id}")
        # Reset state to main menu
        await state.finish()
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
