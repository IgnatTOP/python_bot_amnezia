from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified
from datetime import datetime, timedelta
import logging
import db
from navigation import UserStates, AdminStates, Navigation
from services import VPNService, PaymentService, UserService
from typing import Union

logger = logging.getLogger(__name__)

class Handlers:
    def __init__(self, bot, admin_id: int, vpn_service: VPNService, payment_service: PaymentService, user_service: UserService):
        self.bot = bot
        self.admin_id = admin_id
        self.nav = Navigation(admin_id)
        self.vpn_service = vpn_service
        self.payment_service = payment_service
        self.user_service = user_service

    async def start_command(self, message: types.Message, state: FSMContext):
        """Handle /start command"""
        user_id = message.from_user.id
        await state.finish()
        
        if user_id == self.admin_id:
            await AdminStates.ADMIN_MENU.set()
            text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        else:
            await UserStates.MAIN_MENU.set()
            text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n"
                "üîê –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º VPN –∫–ª—é—á–æ–º\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )
        
        markup = self.nav.get_main_menu(user_id)
        await message.answer(text, reply_markup=markup)

    async def help_command(self, message: types.Message):
        """Handle /help command"""
        user_id = message.from_user.id
        if user_id == self.admin_id:
            text = (
                "üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        else:
            text = (
                "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ VPN"
            )
        await message.answer(text)

    async def handle_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """Central callback handler"""
        user_id = callback.from_user.id
        current_state = await state.get_state()
        
        try:
            if callback.data == "return_main":
                await self.return_to_main_menu(callback, state)
                return

            if user_id == self.admin_id:
                await self.handle_admin_callback(callback, state, current_state)
            else:
                await self.handle_user_callback(callback, state, current_state)
                
        except MessageNotModified:
            await callback.answer()
        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            await self.nav.handle_invalid_state(callback, state)

    async def handle_admin_callback(self, callback: types.CallbackQuery, state: FSMContext, current_state: str):
        """Handle admin callbacks"""
        data = callback.data
        
        try:
            if current_state == AdminStates.ADMIN_MENU.state:
                if data == "add_user":
                    await AdminStates.ADDING_USER.set()
                    await callback.message.edit_text(
                        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                        reply_markup=self.nav.get_back_button()
                    )
                elif data == "manage_users":
                    await AdminStates.MANAGING_USERS.set()
                    markup = self.nav.get_user_management_menu()
                    await callback.message.edit_text(
                        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                        reply_markup=markup
                    )
                elif data == "payment_history":
                    await AdminStates.PAYMENT_HISTORY.set()
                    payments = db.get_all_payments()
                    text = "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
                    
                    for payment in payments:
                        text += (
                            f"ID: {payment['payment_id']}\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment['user_id']}\n"
                            f"–°—É–º–º–∞: {payment['amount']} RUB\n"
                            f"–°—Ç–∞—Ç—É—Å: {payment['status']}\n"
                            f"–î–∞—Ç–∞: {payment['timestamp']}\n\n"
                        )
                    
                    await callback.message.edit_text(
                        text,
                        reply_markup=self.nav.get_back_button()
                    )
                elif data == "broadcast":
                    await AdminStates.BROADCASTING.set()
                    await callback.message.edit_text(
                        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                        reply_markup=self.nav.get_back_button()
                    )
            
            elif current_state == AdminStates.MANAGING_USERS.state:
                if data == "list_users":
                    users = db.get_clients_from_clients_table()
                    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                    
                    for user in users:
                        user_info = self.user_service.get_user_info(user['userData'])
                        expiration = user_info.get("expiration", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        traffic_limit = user_info.get("traffic_limit", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        
                        text += (
                            f"üë§ {user['userData']}\n"
                            f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiration}\n"
                            f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_limit}\n\n"
                        )
                    
                    await callback.message.edit_text(
                        text,
                        reply_markup=self.nav.get_back_button("manage_users")
                    )

        except Exception as e:
            logger.error(f"Error handling admin callback: {e}")
            await self.nav.handle_invalid_state(callback, state)

    async def handle_user_callback(self, callback: types.CallbackQuery, state: FSMContext, current_state: str):
        """Handle regular user callbacks"""
        data = callback.data
        user_id = callback.from_user.id
        
        try:
            if current_state == UserStates.MAIN_MENU.state:
                if data == "buy_vpn":
                    await UserStates.BUYING_VPN.set()
                    markup = self.nav.get_subscription_menu()
                    await callback.message.edit_text(
                        "üõí –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
                        reply_markup=markup
                    )
                elif data == "my_vpn_key":
                    await UserStates.VIEWING_VPN_KEY.set()
                    user_info = self.user_service.get_user_info(f"user_{user_id}")
                    
                    if user_info.get("expiration"):
                        expiration_date = user_info["expiration"]
                        traffic_limit = user_info["traffic_limit"]
                        markup = self.nav.get_vpn_key_menu(True)
                        
                        message_text = (
                            "üîë –í–∞—à VPN –∫–ª—é—á:\n\n"
                            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiration_date.strftime('%d.%m.%Y %H:%M')}\n"
                            f"–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_limit}\n\n"
                        )
                        
                        await callback.message.edit_text(
                            message_text,
                            reply_markup=markup
                        )
                    else:
                        markup = self.nav.get_vpn_key_menu(False)
                        await callback.message.edit_text(
                            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –∫–ª—é—á–∞.\n"
                            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                            reply_markup=markup
                        )
            
            elif current_state == UserStates.BUYING_VPN.state:
                if data.startswith("sub_"):
                    period = data.replace("sub_", "")
                    try:
                        payment_url = await self.payment_service.create_payment(user_id, period)
                        markup = types.InlineKeyboardMarkup()
                        markup.add(
                            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                            types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{period}")
                        )
                        markup.add(self.nav.get_back_button("buy_vpn"))
                        
                        await callback.message.edit_text(
                            "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n"
                            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                            reply_markup=markup
                        )
                    except Exception as e:
                        logger.error(f"Payment creation error: {e}")
                        await callback.message.edit_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=self.nav.get_back_button()
                        )
                
                elif data.startswith("check_payment_"):
                    period = data.replace("check_payment_", "")
                    payments = db.get_user_payments(user_id)
                    latest_payment = next((p for p in payments if p["status"] == "pending"), None)
                    
                    if latest_payment:
                        payment_status = await self.payment_service.check_payment_status(latest_payment["payment_id"])
                        if payment_status:
                            try:
                                username = f"user_{user_id}"
                                await self.user_service.add_user(
                                    username=username,
                                    duration=period,
                                    traffic_limit="–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
                                )
                                
                                markup = self.nav.get_back_button("return_main")
                                await callback.message.edit_text(
                                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                    "VPN –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
                                    "–ù–∞–∂–º–∏—Ç–µ '–ú–æ–π VPN –∫–ª—é—á' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                                    reply_markup=markup
                                )
                            except Exception as e:
                                logger.error(f"Error creating VPN key after payment: {e}")
                                await callback.message.edit_text(
                                    "‚ùå –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞.\n"
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                    reply_markup=self.nav.get_back_button()
                                )
                        else:
                            await callback.answer("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                    else:
                        await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        except Exception as e:
            logger.error(f"Error handling user callback: {e}")
            await self.nav.handle_invalid_state(callback, state)

    async def return_to_main_menu(self, callback: types.CallbackQuery, state: FSMContext):
        """Return to main menu handler"""
        user_id = callback.from_user.id
        await state.finish()
        
        if user_id == self.admin_id:
            await AdminStates.ADMIN_MENU.set()
            text = "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        else:
            await UserStates.MAIN_MENU.set()
            text = "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            
        markup = self.nav.get_main_menu(user_id)
        await callback.message.edit_text(text, reply_markup=markup)

    async def check_user_has_key(self, user_id: int) -> bool:
        """Check if user has an active VPN key"""
        # Implement the check logic here
        return False  # Placeholder

    async def get_vpn_key_info(self, user_id: int) -> str:
        """Get user's VPN key information"""
        # Implement the key info retrieval logic here
        return "Key info placeholder"  # Placeholder
